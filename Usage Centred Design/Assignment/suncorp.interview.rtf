{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid3\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww25820\viewh13940\viewkind0
\deftab720
\pard\tx-1440\tx-720\tx298\tx521\pardeftab720\li1224\fi-504\ri-12262\sb60\sa60\qj
\ls1\ilvl2
\f0\fs36 \cf0 8.1.1.	Please briefly introduce your company and your teams.\
\
8.1.2.	What important software development methods and practices do you think I should understand to be part of a successful development team? \
\
8.1.3.	What roles do you think are needed in a successful software development team?  \
\
8.1.4.	I have been told that it is important to treat testing as important as coding through using methods like automated regression tests, automated builds, and a test first approach. What do you think? \
\
8.1.5.	We learn about practices like stand-up meetings, sprint planning and sprint reviews to keep in touch with other team members and the client in some projects. What would you recommend to keep in touch and get feedback during development? \
\
8.1.6.	We have been told that you review the team process in retrospective meetings after every sprint and it\'92s ok to experiment with the process and make changes. This is part of continuous learning for the team. What do you think works well to keep the team learning?\
\
8.1.7.	There are lots of tools to help with software development methods, like continuous integration tools. What do you think the important tools are to support development team over the development lifecycle?\
\
8.1.8.	What do you think the main success factors are, with respect to methods and tools in developing software? \
\
8.1.9.	In your opinion, what are the main challenges related to software development methods and tools I should learn about.\
\
\
8.2.	Expert Opinion of Critical Success Factors\
8.3.	Answers to curiosity question\
8.3.1.	How requirements are elicited (discovered)  \
8.3.2.	How shared understanding of requirements (elaboration, clarification) is done\
8.3.3.	What is done for release planning and scheduling  \
8.3.4.	How the order of features to work on (priority) is agreed on \
8.3.5.	How the expected effort to develop features is estimated for planning\
8.3.6.	How the progress of the development is monitored \
8.3.7.	How the team is organised \'96 what roles and responsibilities  \
8.3.8.	How the team keeps in touch with each other  \
8.3.9.	How the team keeps in touch with the client (product owner)  \
8.3.10.	What the team\'92s reaction is to changes in features \
8.3.11.	Do the team experiment with process and practices \
8.3.12.	Do the team reflecting and continuously learn  \
8.3.13.	How iterative and incremental development is done (e.g. three week sprints) \
8.3.14.	How requirements are documented/represented (eg user stories) \
8.3.15.	How changes to requirements are handled \
8.3.16.	How testing is done and what levels of testing\'96 unit, regression, integration, acceptance, performance, load. \
8.3.17.	What testing is automated  \
8.3.18.	Is exploratory testing done?  \
8.3.19.	Is test coverage measured \
8.3.20.	Are any quality metrics (measures) tracked? \
8.3.21.	Is a test first approach used? How is the build managed\'96 any automation? \
8.3.22.	How about the frequency of the builds? \
8.3.23.	How is Continuous integration achieved? \
8.3.24.	How are non-functional or quality requirements managed? \
8.3.25.	What programming languages are used?\
8.3.26.	Are there any other important tools? \
}